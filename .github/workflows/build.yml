on:
  push:
  release:
  workflow_dispatch:
permissions:
  contents: write
  issues: write
  pull-requests: write
jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{steps.release.outputs.tag_name}}
    if: startsWith(github.ref, 'refs/heads/master')
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: python
  build:
    runs-on: windows-latest
    if: always()
    needs:
      - release-please
    env:
      PYTHONPATH: lib
      RELEASE: ${{ needs.release-please.outputs.tag_name || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.7
        uses: actions/setup-python@v5
        with:
          python-version: "3.7"

      - name: Install uv
        shell: pwsh
        run: |
          irm https://astral.sh/uv/install.ps1 | iex
          echo "$env:USERPROFILE\.local\bin" >> $GITHUB_PATH

      - name: Prepare build environment
        run: |
          mkdir build

      - name: Install AutoHotkey
        run: |
          Invoke-WebRequest https://github.com/AutoHotkey/AutoHotkey/releases/download/v2.0.19/AutoHotkey_2.0.19.zip -OutFile build/ahk.zip
          7z x build/ahk.zip -obuild/ahk
          echo "$pwd/build/ahk/Compiler" >> $GITHUB_PATH

      - name: Update pypi source
        shell: pwsh
        run: |
          (Get-Content -Path uv.lock -Raw) -replace 'http://pypi.lan', 'https://pypi.org' | Set-Content -Path uv.lock

      - name: Compile AHK scripts
        shell: pwsh
        run: |
          Get-ChildItem -Include *.ahk, lib/batchrender/bin/* | ForEach-Object {
            ahk2exe /in $_
          }

      - name: Build executable
        run: |
          uv run python -m PyInstaller -F main.spec

      - name: Build documentation
        run: |
          uv run Documentation/make.bat html

      - name: Package artifacts
        run: |
          7z a -tzip '-xr!.*' '-xr0!build' build\NukeBatchRender-${env:RELEASE}-win.zip

      - name: Release
        if: ${{ env.RELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${env:RELEASE} --prerelease || true # may already created by release please
          gh release upload ${env:RELEASE} --clobber build/NukeBatchRender-${env:RELEASE}-win.zip
